
@startuml

class main{

}


Aldeano..>Jugador

    'Relaciones que van hacia aldeano'

Cazador--|>Aldeano
Caballero--|>Aldeano
Vidente--|>Aldeano
AldeanoComun--|>Aldeano
Angel--|>Aldeano
Lobo--|>Aldeano

    'verificar entradas nulas con compaeTo o equals'

interface Jugador{
+getId():int
+morir():Magia
+getAldea():Aldea
+getNickname():String
}

class Lobo{
+clone():Lobo
+morir():Magia
+Lobo():Lobo
}

abstract Aldeano{
#cabello:String
#arma:String
#ropa:String
#aldea:Aldea
#id:int
#nickname:String
+getId():int
+getAldea():Aldea
+getNickname():String
+getArma():void
+getCabello():void
+getRopa():void
+morir():Magia
+clone():Object
}

class Cazador{
-esbirro:Aldeano
-static uniqueinstanceof:Cazador
+static getinstance()
#Cazador(esbirro:Aldeano)
+setEsbirro(esbirro:Aldeano):void
+getEsbirro():Aldeano
+morir():Magia
}

class Vidente{
-identidad:Aldeano
-static uniqueinstanceof:Vidente
+static getinstance()
#Vidente(identidad:Aldeano)
+descubrirIdentidad(identidad:Aldeano):void
+morir():Magia
}

class Caballero{
-rehen:Aldeano
-static uniqueinstanceof:Caballero
+static getinstance()
#Caballero(rehen:Aldeano)
+setRehen(rehen:Aldeano):void
+getRehen():Aldeano
+morir():Magia
}

class Angel{
-lobo:Aldeano
-static uniqueinstanceof:Angel
+static getinstance()
#Angel(lobo:Aldeano)
+setLobo(lobo:Aldeano):void
+getLobo():Aldeano
+morir():Magia
}

class AldeanoComun{
+AldeanoComun()
+clone():AldeanoComun
+morir():Magia
}

    'Relaciones de Magia.'

MagiaCaballero..>Magia
MagiaCazador..>Magia
MagiaAngel..>Magia
MagiaVidente..>Magia

interface Magia{
+actua():void
}

class MagiaAngel{
-aDormir:Jugador
+MagiaAngel(aDormir:Jugador,aldeaSobreLaCualActuar:Aldea)
+actua():void
}

class MagiaCazador{
-aDisparar:Jugador
+MagiaCazador(aDisparar:Jugador,aldeaSobreLaCualActuar:Aldea)
+actua():void
}

class MagiaVidente{
-aVer:Jugador
+MagiaVidente(aVer:Jugador,aldeaSobreLaCualActuar:Aldea)
+actua():void
}

class MagiaCaballero{
-sacrificar:Jugador
+MagiaCaballero(sacrificar:Jugador,aldeaSobreLaCualActuar:Aldea)
+actua():void
}

    'Patron State'

    'Relaciones de Aldea'

EstadoAldea..o Aldea
EstadoAldea o..Aldea
EstadoNoche..|>EstadoAldea
EstadoDia..|>EstadoAldea

class Aldea{
#controladorAldea:ControladorJuego
#dia:EstadoAldea
#noche:EstadoAldea
#EstadoActual:EstadoAldea

#todos:LinkedList<Aldeano>    'agregarestructuras de personajes'

+Aldea(controladorAldea: ControladorJuego)
+Aldea(EstadoActual:EstadoAldea)

+setEstadoActual(EstadoActual:AldeaEstado):void
+convocarJuicio():void
+recuentoNoche():void
+convocarBanquete():void
+anochece():void
+amanece():void
+matar(Personaje:aMatar,Personaje asesino):void
    'ver si cumple con MVC'
+linchar(int:id):String
+iniciarMenuVotacionLobos():
+iniciarMenuvotacionAldeanos():
+informeDiario():
    'NECESARIO??? (aunque yo lo puse jajajaja)'
+juicio(id: int):Aldeano


+getAnocheciendo():EstadoAldea
+getAmaneciendo():EstadoAldea
}

interface EstadoAldea{
+convocarJuicio():void
+convocarBanquete():void
+recuentoNoche():void
+anochece():void
+amanece():void
}

class EstadoDia{
#narrador:Aldea
+convocarJuicio():void
+convocarBanquete():void
+recuentoNoche():void
+anochece():void
+amanece():void
+EstadoDia(Aldea narrador)
}

class EstadoNoche{
#narrador:Aldea
+convocarJuicio():void
+convocarBanquete():void
+recuentoNoche():void
+anochece():void
+amanece():void
+EstadoNoche(Aldea narrador)
}
                'Patron Builder'

    BuilderJugador ..o DirectorBuilderJugador
    Jugador ..o DirectorBuilderJugador
    BuilderAldeano ..|> BuilderJugador
    main "use"..|> MenusJuego

class DirectorBuilderJugador{
    # builderActual: BuilderJugador
    # personajeAConstruir: Aldeano


    Director(tipoBuilder: BuilderJugador)
    +cambiarBuilder(tipoBuilder: BuilderJugador): void

    +creaLobo(id: int, nickname: String, aldeaHogar: Aldea): void
    +creaAldeanoComun(id: int, nickname: String, aldeaHogar: Aldea): void
    +creaAngel(id: int, nickname: String, aldeaHogar: Aldea): void
    +creaVidente(id: int, nickname: String, aldeaHogar: Aldea): void
    +creaCazador(id: int, nickname: String, aldeaHogar: Aldea): void
    +creaCaballero(id: int, nickname: String, aldeaHogar: Aldea): void

}

interface "BuilderJugador"{
    + setCabello(): void
    + setArma(): void
    + setRopa(): void
    + setAldea(): void
}

class "BuilderAldeano"{
    # personajeAConstruir: Aldeano

    + BuilderAldeano(id: int, nickname: String, aldeHogar: Aldea):
    + setCabello(cabello:String): void
    + setArma(arma:String): void
    + setRopa(ropa:String): void
    + setAldea(aldeaHogar:Aldea): void

    + getPersonaje(): Aldeano
}
    'MVC puro y duro'
MenusJuego ..> ObservadorVista
ControladorJuego ..> ControladorSujeto
ControladorJuego ..o ObservadorVista
ControladorJuego ..o Aldea


class MenusJuego{

        'casi todos m√©todos distintos'

    +run():void
    +seleccionarTipoJuego(): void
    +getJugadores():int
    +getint():int
    +getString():String
    +juego():void
    +rifa(lista:ArrayList<String>):LinkedList<Aldeano>

    +instruccionesTipoJuego(numeroTipoJuego : int): void


}

class ControladorJuego{

}

interface ObservadorVista{
    +mostrar(String mensaje);

}

interface ControladorSujeto{
    +suscribir(aSuscribir : Observador): void
    + desuscribir(aDesuscribir : Observador): void
    +publicar(mensaje : String): void
}
@enduml
