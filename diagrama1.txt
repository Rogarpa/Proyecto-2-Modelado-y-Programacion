
@startuml

class main{

}


Aldeano..|>Jugador

    'Relaciones que van hacia aldeano'

Cazador--|>Aldeano
Caballero--|>Aldeano
Vidente--|>Aldeano
AldeanoComun--|>Aldeano
Angel--|>Aldeano
Lobo--|>Aldeano

    'verificar entradas nulas con compaeTo o equals'

interface Jugador{
+getId():int
+morir():Magia
+getAldea():Aldea
+getNickname():String
+getDescripcion():String
}

class Lobo{
+clone():Lobo
+morir():Magia
+Lobo()
}

abstract Aldeano{
#cabello:String
#arma:String
#ropa:String
#aldea:Aldea
#id:int
#nickname:String

+setId(id : int): void
+setNickname(nickname : String): void
+setAldea(aldea : Aldea): void

+getId():int
+getAldea():Aldea
+getNickname():String
+getArma():void
+getCabello():void
+getRopa():void
+morir():Magia
+clone():Object
+getDescripcion():String
}

class Cazador{
-esbirro:Jugador
-static uniqueinstanceof:Cazador
+static getinstance(Aldeano):Cazador
#Cazador(Aldeano)
+setEsbirro(Jugador):void
+getEsbirro():Aldeano
+morir():Magia
}

class Vidente{
-identidad:Jugador
-static uniqueinstanceof:Vidente
+static getinstance(Jugador : identidad):Vidente
#Vidente(Jugador: identidad)
+setIdentidad(Jugador identidad): void
+descubrirIdentidad(Aldeano):void
+morir():Magia
}

class Caballero{
-rehen:Aldeano
-static uniqueinstanceof:Caballero
+static getinstance(Aldeano):Caballero
#Caballero(Aldeano)
+setRehen(Aldeano):void
+getRehen():Aldeano
+morir():Magia
}

class Angel{
-lobo:Aldeano
-static uniqueinstanceof:Angel
+static getinstance(Aldeano):Angel
#Angel(Aldeano)
+setLobo(Aldeano):void
+getLobo():Aldeano
+morir():Magia
}


class AldeanoComun{
+AldeanoComun()
+clone():AldeanoComun
+morir():Magia
}
    'Patron State'

    'Relaciones de Aldea'

EstadoAldea..o Aldea
EstadoAldea o..Aldea
EstadoNoche..|>EstadoAldea
EstadoDia..|>EstadoAldea

class Aldea{
#controladorAldea:ControladorJuego
#dia:EstadoAldea
#noche:EstadoAldea
#EstadoActual:EstadoAldea
lobos:ArrayLista<Lobo>
todos:LinkedList<Aldeano>
muertosUltimaNoche: LinkedList<Jugador>

+Aldea(controladorAldea: ControladorJuego)
+Aldea(EstadoActual:EstadoAldea)

+setEstadoActual(EstadoActual:AldeaEstado):void
+getJugadores(): void
+convocarJuicio():void
+recuentoNoche():void
+convocarBanquete():void
+anochece():void
+amanece():void
+matar(aMatar : Jugador,asesino : Jugador):void
+getMuertosUltimaNoche():LinkedList<Jugador>
+comenzarCicloDiaNoche():void
    'ver si cumple con MVC'
+linchar(int:id):void
+iniciarMenuVotacionLobos():
+iniciarMenuvotacionAldeanos():
+informeDiario():
+juicio(id: int):void
+getControladorAldea():ControladorJuego
+agregarAldeano(aAgregar:Aldeano):void
+agregarLobo(aAgregar:Lobo):void
+getAnocheciendo():EstadoAldea
+getAmaneciendo():EstadoAldea
+getPersonaje(int):Aldeano
}

interface EstadoAldea{
+convocarJuicio():void
+convocarBanquete():void
+recuentoNoche():void
+anochece():void
+amanece():void
}

class EstadoDia{
#narrador:Aldea
+convocarJuicio():void
+convocarBanquete():void
+recuentoNoche():void
+anochece():void
+amanece():void
+EstadoDia(Aldea narrador)
}

class EstadoNoche{
#narrador:Aldea
+convocarJuicio():void
+convocarBanquete():void
+recuentoNoche():void
+anochece():void
+amanece():void
+EstadoNoche(Aldea narrador)
}
                'Patron Builder'

    BuilderJugador ..o DirectorBuilderJugador
    Jugador ..o DirectorBuilderJugador
    BuilderAldeano ..|> BuilderJugador
    BuilderLobo..|>BuilderJugador
    BuilderAngel..|>BuilderJugador
    BuilderCaballero..|>BuilderJugador
    BuilderCazador..|>BuilderJugador
    BuilderVidente..|>BuilderJugador
    main "use"..|> MenusJuego

class DirectorBuilderJugador{
    # builderActual: BuilderJugador
    # personajeAConstruir: Aldeano


    +DirectorBuilderJugador(tipoBuilder: BuilderJugador)
    +cambiarBuilder(tipoBuilder: BuilderJugador): void

    +creaLobo(id: int, nickname: String, aldeaHogar: Aldea): void
    +creaAldeanoComun(id: int, nickname: String, aldeaHogar: Aldea): void
    +creaAngel(id: int, nickname: String, aldeaHogar: Aldea,Aldeano): void
    +creaVidente(id: int, nickname: String, aldeaHogar: Aldea,Aldeano): void
    +creaCazador(id: int, nickname: String, aldeaHogar: Aldea,Aldeano): void
    +creaCaballero(id: int, nickname: String, aldeaHogar: Aldea,Aldeano): void

}

interface "BuilderJugador"{
    + setCabello(String): void
    + setArma(String): void
    + setRopa(String):void
    + setAldea(Aldea): void
    + setId(int):void
    + setNickname(String):void
    + default setRelacion(Aldeano):void
}

class "BuilderAldeano"{
    # personajeAConstruir: Aldeano
    +BuilderAldeano()
    + setCabello(cabello:String): void
    + setArma(arma:String): void
    + setRopa(ropa:String): void
    + setAldea(aldeaHogar:Aldea): void
    + getPersonaje(): Aldeano
}

class BuilderLobo{
+personajeAConstruir:Lobo
+BuilderLobo()
+ setCabello(): void
+ setArma(): void
+ setRopa(): void
+ setAldea(): void
+ getPersonaje():Lobo
}

class BuilderCazador{
    # personajeAConstruir: Cazador
    +BuilderCazador()
    + setCabello(cabello:String): void
    + setArma(arma:String): void
    + setRopa(ropa:String): void
    + setAldea(aldeaHogar:Aldea): void
    + getPersonaje(): Aldeano
    + setRelacion(Aldeano):void
}

class BuilderCaballero{
    # personajeAConstruir: Caballero
    +BuilderCaballero()
    + setCabello(cabello:String): void
    + setArma(arma:String): void
    + setRopa(ropa:String): void
    + setAldea(aldeaHogar:Aldea): void
    + getPersonaje(): Aldeano
    + setRelacion(Aldeano):void
}

class BuilderAngel{
    # personajeAConstruir:Angel
    +BuilderAngel()
    + setCabello(cabello:String):void
    + setArma(arma:String): void
    + setRopa(ropa:String): void
    + setAldea(aldeaHogar:Aldea): void
    + getPersonaje(): Aldeano
    + setRelacion(Aldeano):void
}

class BuilderVidente{
    # personajeAConstruir: Vidente
    +BuilderVidente()
    + setCabello(cabello:String): void
    + setArma(arma:String): void
    + setRopa(ropa:String): void
    + setAldea(aldeaHogar:Aldea): void
    + getPersonaje(): Aldeano
    + setRelacion(Aldeano):void
}
    'MVC puro y duro'
MenusJuego ..> ObservadorVista
ControladorJuego ..> ControladorSujeto
ControladorJuego ..o ObservadorVista
ControladorJuego ..o Aldea


class MenusJuego{

    +bienvenida():void
    +menuInicial():int
    +tutorial():int
    +seleccionarTipoJuego():void
    +instruccionesTipoJuego(int):void
    +getNicknameJugadorNuevo():String
    +getInputString(String,String):String
    +getInputIntint(String,String,int,int):int
    +getInputInt(String,String):int
    +mostrar():void
    +actualiza():void
    +getNominacion():LinkedList<int[]>

        'casi todos m√©todos distintos'

    '+juego():void'
    '+rifa(ArrayList<String>):LinkedList<Aldeano>'


}

class ControladorJuego{
    #menusAControlar:MenusJuego
    #aldeaAControlar:Aldea
    #observadores:LinkedList<ObservadorVista>

    +ControladorJuego(aldeaAControlar: Aldea)
    +bienvenida():void
    +iniciarJuego():void
    +rellenarAldea():void

    +obtenerCorrelacionIdsNominaciones():LinkedList<int[]>
    +obtenerListaNicknamesJuego1():String[]
    +obtenerListaNicknamesJuego2():String[]
    +obtenerListaNicknamesJuego3():Stirng[]

    +suscribir(ObservadorVista):void
    +desuscribir(ObservadorVista):void

    +publicar(String):void
}

interface ObservadorVista{
    +mostrar(String mensaje):void
    +actualiza():void

}

interface ControladorSujeto{
    +suscribir(aSuscribir : ObservadorVista): void
    + desuscribir(aDesuscribir : ObservadorVista): void
    +publicar(mensaje:String): void
}


@enduml
