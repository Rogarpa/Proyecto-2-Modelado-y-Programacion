
@startuml

class main{

}


Aldeano..>Jugador

    'Relaciones que van hacia aldeano'

Cazador--|>Aldeano
Caballero--|>Aldeano
Vidente--|>Aldeano
AldeanoComun--|>Aldeano
Angel--|>Aldeano
Lobo--|>Aldeano

interface Jugador{
+getId():int
+morir():void
+getAldea():Aldea
+getNickname():String
}

abstract Lobo{
+clone():Lobo
+morir():void
+Lobo():Lobo
}

abstract Aldeano{
#cabello:String
#arma:String
#ropa:String
#aldea:Aldea
#id:int
#nickname:String
+getId():int
+getAldea():Aldea
+getNickname():String
+getArma():void
+getCabello():void
+getRopa():void
+morir():void
}

class Cazador{
-static uniqueinstanceof:Cazador
+static getinstance()
#Cazador()
+setEsbirro():void
+morir():void
}

class Vidente{
-static uniqueinstanceof:Vidente
+static getinstance()
#Vidente()
+descubrirIdentidad():void
+morir():void
}

class Caballero{
-static uniqueinstanceof:Caballero
+static getinstance()
#Caballero()
+setRehen():void
+morir():void
}

class Angel{
-static uniqueinstanceof:Angel
+static getinstance()
#Angel()
+mefui():void
+morir():void
}

class AldeanoComun{
+AldeanoComun()
+clone():AldeanoComun
+morir():void
}

    'Relaciones de Magia.'

MagiaCaballero..>Magia
MagiaCazador..>Magia
MagiaAngel..>Magia
MagiaVidente..>Magia

interface Magia{
+actua():void
}

class MagiaAngel{
-aDormir:Lobo
+MagiaAngel(aDormir:Lobo,aldeaSobreLaCualActuar:Aldea)
+actua():void
}

class MagiaCazador{
-aDisparar:Jugador
+MagiaCazador(aDisparar:Jugador,aldeaSobreLaCualActuar:Aldea)
+actua():void
}

class MagiaVidente{
-aVer:Jugador
+MagiaVidente(aVer:Jugador,aldeaSobreLaCualActuar:Aldea)
+actua():void
}

class MagiaCaballero{
-sacrificar:Jugador
+MagiaCaballero(sacrificar:Jugador,aldeaSobreLaCualActuar:Aldea)
+actua():void
}

    'Patron State'

    'Relaciones de Aldea'

EstadoAldea..o Aldea
EstadoAldea o..Aldea
EstadoNoche..|>EstadoAldea
EstadoDia..|>EstadoAldea

class Aldea{
-dia:EstadoAldea
-noche:EstadoAldea
-EstadoActual:EstadoAldea
+Aldea()
+Aldea(EstadoActual:EstadoAldea)
+setEstadoActual(EstadoActual:AldeaEstado):void
+convocarJuicio():void
+convocarBanquete():void
+recuentoNoche():void
+anochece():void
+amanece():void
-matar(Personaje:aMatar,Personaje asesino):void
+getAnocheciendo():EstadoAldea
+getAmaneciendo():EstadoAldea
}

interface EstadoAldea{
+convocarJuicio():void
+convocarBanquete():void
+recuentoNoche():void
+anochece():void
+amanece():void
}

class EstadoDia{
#narrador:Aldea
+convocarJuicio():void
+convocarBanquete():void
+recuentoNoche():void
+anochece():void
+amanece():void
+EstadoDia(Aldea narrador)
}

class EstadoNoche{
#narrador:Aldea
+convocarJuicio():void
+convocarBanquete():void
+recuentoNoche():void
+anochece():void
+amanece():void
+EstadoNoche(Aldea narrador)
}
                'Patron Builder'

    BuilderJugador ..o DirectorBuilderJugador 
    Jugador ..o DirectorBuilderJugador    
    BuilderAldeano ..|> BuilderJugador
    main "use"..|> MenusJuego

class DirectorBuilderJugador{
    # builderActual: BuilderJugador
    # personajeAConstruir: Jugador


    Director(tipoBuilder: BuilderJugador)
    +cambiarBuilder(tipoBuilder: BuilderJugador): void
    
    +creaLoboSimple(id: int, nickname: String, aldeaHogar: a): LoboSimple
    +creaAldeanoComun(id: int, nickname: String, aldeaHogar: a): AldeanoComun
    +creaAngel(id: int, nickname: String, aldeaHogar: a): Angel
    +creaVidente(id: int, nickname: String, aldeaHogar: a): Vidente
    +creaCazador(id: int, nickname: String, aldeaHogar: a): Cazador
    +creaCaballero(id: int, nickname: String, aldeaHogar: a): Caballero

}
 
interface "BuilderJugador"{
    + setCabello(): void
    + setArma(): void
    + setRopa(): void
    + setAldea(): void
}

class "BuilderAldeano"{
    # personajeAConstruir: Aldeano

    + BuilderAldeano(id: int, nickname: String, aldeHogar: Aldea):
    + setCabello(): void
    + setArma(): void
    + setRopa(): void
    + setAldea(): void

    + getPersonaje(): Jugador
}

class MenusJuego{
    +run():void
    +seleccionarTipoJuego(): void 
    +getJugadores():int
    +getint():int
    +getString():String
    +juego():void    
}
@enduml

